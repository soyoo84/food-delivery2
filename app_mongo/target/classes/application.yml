server:
  port: 8080
---

spring:
  main:
    allow-bean-definition-overriding: true
  profiles: default
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
  data:
    mongodb:
#      host: mongodb.default.svc.cluster.local
#      host: localhost
      uri: mongodb://127.0.0.1:27017/mongo-example
    database: mongo-example
#      host: 127.0.0.1
#      password: password
#      username: username
#      authentication-database: database
#      database: database
#  datasource:
#    driver-class-name: 
#    url: postgres-url
#    username: user-name
#    password: password
  cloud:
    stream:
      kafka:
        binder:
          brokers: localhost:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: app
          destination: fooddelivery
          contentType: application/json
        event-out:
          destination: fooddelivery
          contentType: application/json

logging:
  level:
    org.hibernate.type: trace
    org.springframework.cloud: debug
server:
  port: 8081

feign:
  hystrix:
    enabled: true

# To set thread isolation to SEMAPHORE
#hystrix:
#  command:
#    default:
#      execution:
#        isolation:
#          strategy: SEMAPHORE

hystrix:
  command:
    # 전역설정
    default:
      execution.isolation.thread.timeoutInMilliseconds: 610
---

spring:
  profiles: docker
  cloud:
    stream:
      kafka:
        binder:
          brokers: my-kafka.kafka.svc.cluster.local:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: app
          destination: fooddelivery
          contentType: application/json
        event-out:
          destination: fooddelivery
          contentType: application/json
